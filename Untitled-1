import React, {useState, useEffect, useRef} from 'react';
import {View, Text, Animated, StyleSheet} from 'react-native';
import {TouchableOpacity} from 'react-native-gesture-handler';
import {SafeAreaView} from 'react-native-safe-area-context';

function useSomeAnim() {
  const animValue = useRef(new Animated.Value(0));

  // --------- ROTATE SPNIPET
  const rotateValue = useRef(new Animated.Value(0));

  const interpolateRotateValue = rotateValue.current.interpolate({
    // -- CAN BE UPDATED
    inputRange: [0, 1],
    // -- CAN BE UPDATED
    outputRange: ['0deg', '360deg'],
  });

  useEffect(() => {
    // for ROTATE
    Animated.timing(rotateValue.current, {
      toValue: 1,
      duration: 1000,
      useNativeDriver: true,
    });
    // use .start()
  }, []);

  const rotateStyle = {
    transform: [
      {
        rotate: interpolateRotateValue,
      },
    ],
  };
  // --------- ROTATE SPNIPET END

  useEffect(() => {
    Animated.timing(animValue.current, {
      toValue: 1,
      duration: 1000,
      useNativeDriver: true,
    });
  }, []);

  useEffect(() => {
    Animated.spring(animValue.current, {
      toValue: 1,
      useNativeDriver: true,
    });
  }, []);
}

function useRotationAnimation(timing = 1000) {
  const animted1 = useRef(new Animated.Value(0));
  const animted2 = useRef(new Animated.Value(1));
  const rotate = useRef(new Animated.Value(0));

  const rotateStyle = rotate.current.interpolate({
    inputRange: [0, 1],
    outputRange: ['0deg', '360deg'],
  });

  useEffect(() => {}, []);

  const animatedStyle = {
    //------ With transform
    transform: [],
  };

  return {
    animatedStyle,
    timing,
  };
}

const App = () => {
 
  return <View style={[styles.container]}></View>;
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

export default App;
